=========================
How to use 0-add_integer.py
=========================

It has one main function, ''0-add_integer.py()''
This is used just like a + b

::
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(4, 5)
    9

Has a default value
::
    >>> add_integer(4,)
    102

Works well with floats too. It casts them first, though

::
    >>> add_integer(9.7, 5.3)
    14

    >>> type(add_integer(9.7, 5.3)) is int
    True

However, some floats can't be used
::
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Non-Numbers
===========
Raise TypeErrors if either a or b is not a float or int
    >>> add_integer("J", 5)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(4, "")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer(4, [9, 0])
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer(4, {})
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer([9, 0], 5)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer({}, 5)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Also raise errors if there's missing input
    >>> add_integer()
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(3, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer(None,)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
